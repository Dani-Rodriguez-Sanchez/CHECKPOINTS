¿Qué es un condicional?

Es una estructura de control, que  permite condicionar la ejecución de uno o varios bloques de sentencias al cumplimiento de una o varias condiciones. Las sentencias condicionales son if, if-else, if anidada e if-elif-else.
IF -ejecuta el código, y si es verdadero, ejecuta a continuación la sentencia seguida
	a = 1
	b = 2

	if a > b
   	 print("a es mayor que b")

IF-ELSE-se utiliza para ejecutar tanto la parte verdadera como la falsa de la condición. Si esta es falsa, se ejecutará el bloque de código a continuación de else.
	if a > b
   	 print("a es mayor que b")
	else 
	   print("b es mayor que a")

IF ANIDADA-es una sentencia anidada dentro de otra, sirve para filtrar y comprobar varias condiciones. Su alcance puede ser ilimitado, pero su lectura puede resultar compleja de entender.
	numero = int(input('Introduce un número: '))
	if numero % 3 == 0:
    		if numero % 5 == 0:
        		print('El número', numero, 'es divisible por 3 y por 5')
    	else:
        print('El número', numero, 'es divisible por 3')

IF ELIF ELSE-para problemas condicionales múltiples. En primer lugar comprueba la condición de la sentencia if, si es falsa, se evalua la sentencia elif, y si esta es también falsa, se ejecuta la sentencia else.
	
	x = 1

	if  x > 10:
    		print(" x es mayor que 10!")
	elif x < 10:
      	print("x es menor que 10!")
	elif x < 20 :
      	print("x es menor que 20!")
	else:
     		print("x es igual a 10")
-------------
¿Cuáles son los diferentes tipos de bucles en python? ¿Por qué son útiles?

Un bucle es una estructura de control que repite un bloque de instrucciones, son útiles para automatizar la ejecución del código. 
Hay dos tipos: los bucles for y los bucles while. A grandes rasgos, se utilizan los primeros cuando sabemos de antemano cuantas veces se repetirá el programa, y el segundo cuando no lo conocemos.
WHILE-permite ejecutar una sección de código repetidas veces, mientras una condición determinada se cumpla. Cuando se deje de cumplir, se saldrá del bucle y se continuará la ejecución normal. 
Por lo tanto el while tiene dos partes:
La condición que se tiene que cumplir para que se ejecute el código.
El bloque de código que se ejecutará mientras la condición se cumpla.

	x = 5 
	while x > 0: 
		x -=1 
		print(x) 
	# Salida: 4,3,2,1,0

FOR-Mientras que en el while la condición era evaluada en cada iteración para decidir si volver a ejecutar o no el código, en el for no existe tal condición, sino un iterable que define las veces que se ejecutará el código.
	for i in range(0, 4): 
		print(i) 
		# Salida: 
		# 0 
		# 1 
		# 2 
		# 3 
-------------
¿Qué es una comprensión de listas en python?

Es una manera de crear listas de elementos en una sola línea de código, simplificando el código al máximo. Python define una estructura para ello con la sintaxis de de las list comprehensions, en la cual entre corchetes se define una expresión, seguida de un bucle for al que opcionalmente le pueden seguir otros bucles for y/o una condición.

              [ expresion(i) for i in list if condición ]



De esta manera, este código:
	cuadrados = []
	for i in range(5):
    		cuadrados.append(i**2)
	#[0, 1, 4, 9, 16]
quedaría así:
	cuadrados = [i**2 for i in range(5)] 
	#[0, 1, 4, 9, 16]
-----------
¿Qué es un argumento en Python?

Es una parte de las funciones, que tendrán un nombre, argumentos de entrada, un código a ejecutar, y unos parámetros de salida. Estos argumentos pueden ser de nombre o de posición.
ARGUMENTOS DE POSICION-Es la forma más básica. Considera la posición de los parámetro. Por ejemplo:
	def resta(a, b): 
		return a-b 
	resta(5, 3) # 2
ARGUMENTOS POR NOMBRE- Hace lo mismo que el de posición, pero usamos el nombre del argumento con = y su valor. Al indicar en la llamada a la función el nombre de la variable y el valor, el orden ya no importa. Por ejemplo:
	
	resta(b=5, a=3) # -2
Además estos pueden ser de LONGITUD VARIABLE, cuando no sabemos de antemano la cantidad de argumentos que se pasarán a una función. Esto se hace indicando el parámetro *arg. Por ejemplo:
	def sum(*args):
		value = 0
		for n in args:
		value += n
		return value
Y si estos argumentos se pasan como un número variable con nombre (como diccionario), el parámetro es **kwargs
---------
¿Qué es una función de Python Lambda?

También se llaman funciones anónimas, porque se definen sin un nombre. 
Es una herramienta que permite recoger una función simple en una variable, y pasarla de forma muy sencilla a otras funciones. Su potencial radica en que la sintaxis condensada, que nos permite escribir funciones simples en tan solo una línea.
SINTAXIS:
lambda arguments : expression

Por ejemplo:
	def myfunc(n):
		return lambda a : a * n
---------
¿Qué es un paquete pip?

PIP es un programa de instalación de módulos externos de Python. Son librerías o bibliotecas de código, compartidas por otros programadores, en código abierto, y son útiles para ahorrar escribir mucho código, o simplemente realizar una tarea particular de la manera más sencilla. 
Está diseñado para que se use desde la línea de comandos, y se empezó a incluir pip en Python con la versión de Python 3.4.
El “Indice de paquetes de Python” es un repositorio público de paquetes bajo licencias de código abierto disponibles para otros usuarios de Python, y se encuentra en este enlace:
https://pypi.org/

Por ejemplo:
	sudo pip install requests
