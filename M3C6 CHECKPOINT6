CUESTIONARIO:

¿Para qué usamos Classes en Python?
  Python es un lenguaje de programación orientado a objetos. Casi todo en Python es un objeto, que es una entidad con sus propiedades y métodos. 
  Entonces una clase es un constructor de objetos, o un modelo para crearlos, además nos permite definir las propiedades y métodos que tendrá cualquier 
  objeto creado a partir de dicha clase.
  También las clases son una manera de organizar el código y así facilitar su mantenimiento, además de aprovechar la reutilización del código: 
  si tenemos que crear varios objetos que tengan las mismas propiedades y métodos, no tenemos que repetir el código, en su lugar, podemos crear 
  nuevos objetos a partir de la misma clase.
  Por ejemplo:
	  class Galleta:
		  una_galleta = Galleta()
		  otra_galleta = Galleta()
  Así con la misma clase, damos lugar a dos objetos independientes

------------------
¿Qué método se ejecuta automáticamente cuando se crea una instancia de una clase?
  Al crear una instancia de una clase (instanciar) se crea el objeto en la memoria del sistema operativo, ya que hasta que no se ejecuta el programa, no se crea en memoria.
  Existe un método especial que se ejecuta cuando creamos una instancia de un objeto. Este método es __init__ que nos permite asignar atributos y realizar operaciones 
  con el objeto en el momento de su creación. 
    1- De esta manera se crea una clase, y después se inicializa un objeto
	class Persona:
   	 def inicializar(self,nom):
        	self.nombre=nom
	#persona1=Persona()
	#persona1.inicializar("Pedro")
   2-Con el método __init__ automáticamente se inicializa cuando se crea la instancia. Además, puede tomar otros parámetros opcionales 
     que se utilizarán para configurar los atributos del objeto.
	class Coche:
	def __init__(self, marca, modelo):
	self.marca = marca
	self.modelo = modelo

------------------
¿Cuáles son los tres verbos de API?

  Son 4 los métodos, y estos son: Get, Post, Put y Delete. Están en la librería requests, que es necesario intalar de esta manera:
	pip install requests

  GET : este método permite obtener información del servidor.
	URL = "https://jsonplaceholder.typicode.com/posts/1"
	response = requests.get(URL)
  POST : permite enviar información, ya sea para agregar información a una base de datos o para pasar la entrada de un modelo de aprendizaje automático.
     El método post() recibe dos parámetros, el primero es la URL de la API y el segundo es la información del objeto que queremos crear dentro de un diccionario.  
	URL = "https://jsonplaceholder.typicode.com/posts"
	DATA = {
    		"title": "Título del ejemplo",
    		"body": "Contenido de un nuevo post",
   		 "userId": 1
	}
	response = requests.post(URL, json=DATA)
  PUT: actualizar información. Generalmente se utiliza para gestionar información en la base de datos.
     Este método también recibe dos parámetros, el primero es la URL que le indica a la API el objeto en particular que deseas actualizar 
     y el segundo parámetro es la información con la que deseas actualizar el objeto.
  	URL = "https://jsonplaceholder.typicode.com/posts/1"
	DATA = {
   		 "title": "Título actualizado",
   		 "userId": 2
	}
	response = requests.put(URL, json=DATA)
  DELETE : este método se utiliza para eliminar información de la base de datos. Este método recibe como parámetro la URL
     que le indica a el servidor de la API el objeto en particular que deseas eliminar
	URL = "https://jsonplaceholder.typicode.com/posts/1"
	response = requests.delete(URL)
----------------
¿Es MongoDB una base de datos SQL o NoSQL?
  MongoDB es un programa de gestión de bases de datos NoSQL (Not only SQL) de código abierto. 

  SQL significa Lenguaje de Consulta Estructurado, evolucionando desde la década de 1970 hasta convertirse en un poderoso lenguaje para consultar datos estructurados. 
  NoSQL es un sistema de base de datos más nuevo que no utiliza un lenguaje de consulta estándar pero emplea documentos JSON para el almacenamiento de datos.
  Ambos son dos tipos de bases de datos que permiten el almacenamiento y acceso ordenado a los datos, tanto estructurados (SQL) como no estructurados (NoSQL).

  Las bases de datos SQL son relacionales, es decir, sus datos están relacionados entre sí y se almacenan como texto de manera estructurada en tablas 
  que constan de registros (filas) que es la propia información relacionada entre sí, en base a su contexto, y campos (columnas) 
  que son los distintos tipos de información que se relacionan. Por ejemplo Oracle, MySQL, y SQL Server.

  Por otra parte las bases de datos NoSQL aparecen debido a la necesidad de flexibilidad para almacenar distintos tipos de información no estructurada
  como documentos (PDF, Word, Excel…), emails, SMS, localizaciones geográficas, audio, vídeo, publicaciones de RRSS… 
  Cuando este volumen de datos es muy grande, es lo que se conoce como Big Data. Tienen por tanto una gran capacidad de escalabilidad.
  Por ejemplo MongoDB, Cassandra, CouchDB, Redis, y Neo4j.
---------------
¿Qué es una API?
  Una API (interfaz de programación de aplicaciones), es un conjunto de reglas y protocolos que permiten que dos sistemas informáticos o aplicaciones interactúen entre sí, 
  por ejemplo para recuperar datos de un servidor web. 
  En esencia, una API actúa como una capa o interfaz de comunicación que permite que diferentes sistemas se comuniquen entre sí.
  Generalmente realizas una solicitud de información o datos y la API te devuelve una respuesta con lo que solicitaste. Por ejemplo, cada vez que abres Twitter 
  o te desplazas hacia abajo en tu feed de Instagram, básicamente estás haciendo una solicitud a la API detrás de esa aplicación 
  y obteniendo una respuesta a cambio. Esto también se conoce como llamar a una API.
  Una interface API es JSON (JAVASCRIPT OBJETS NOTATION), es un formato ligero de intercambio de datos. El cual es fácil para los humanos leer y escribir, 
  y es fácil para las máquinas analizar y generar.
  Para utilizarlo, hay que implementar la biblioteca de solicitudes en Python:
	import requests
	r = requests.get('https://api.dailysmarty.com/posts')-->hace un request y se cierra
	r.json()-->imprime la respuesta
---------------
¿Qué es Postman?
  Es una aplicación que permite conectar Python con APIs externas. Así los usuarios puedencrear scripts completos y flexibles, 
  componer y administrar variables de entorno y configurar recursos para realizar una variedad de funciones.

---------------
¿Qué es el polimorfismo?
  Es uno de los pilares básicos en la programación orientada a objetos, y significa que objetos de diferentes clases pueden ser accedidos
  utilizando el mismo interfaz, mostrando un comportamiento distinto (tomando diferentes formas) según cómo sean accedidos. Esto significa 
  que podemos llamar a un método exactamente igual a otro y el interprete automáticamente detectará a cual de ellos nos referimos según diversos parámetros.
  
  Por ejemplo, aquí el mismo nombre de Método está en diferentes clases. Al momento de crear una instancia y llamar al método vemos que 
  aunque se llamen igual el interprete se guía por el nombre de la clase.
	class Marino(): #Clase Padre
    		def hablar(self): #Método Hablar
       			 print ("Hola..")
  	class Pulpo(Marino): #Clase Hija
   		 def hablar (self): #Método Hablar
			 print ("Soy un Pulpo")
---------------
¿Qué es un método dunder?
  «double underscore methods» También llamados métodos especiales, o mágicos. Son métodos de Python que definen cómo se comportan los objetos de Python cuando se realizan operaciones comunes sobre ellos.
  Normalmente no son invocados directamente por el programador. Por ejemplo cuando haces una simple suma 2 + 2 se está invocando al método __add__ internamente.
  Estos métodos se definen claramente con guiones bajos dobles antes y después del nombre del método.
  Los más comunes son __init__ y __repr__

  __init__ permite definir los atributos y comportamientos iniciales de un objeto al momento de su creación. es un método especial en Python que se utiliza 
  para inicializar los objetos de una clase.
  Es parte de la sintaxis del lenguaje y se llama automáticamente cuando se crea una instancia de la clase.
  El método __init__ se define dentro de una clase y toma como parámetro obligatorio self, el cual hace referencia al objeto actual que se está creando. 
  Además, puede tomar otros parámetros opcionales que se utilizarán para configurar los atributos del objeto.

	class Rectangle:
    		def __init__(self, height, width):
        	    self.height = height
       		    self.width = width
  
  __repr__ se utiliza para devolver una representación de cadena legible de un objeto. 
  Este método se define dentro de una clase y se llama cuando se usa la función repr() en un objeto de esa clase. 
  Se espera que el resultado sea una cadena que contenga información relevante sobre el objeto y sus valores de atributo.
	
	class Persona:
		def__init__(self, nombre, edad):
	             self.nombre=nombre
                     self.edad=edad
                def __repr__(self):
        return f"persona(nombre='{self.nombre}', edad={self.edad})"

---------------
¿Qué es un decorador de python?
  Los decoradores son funciones que modifican el comportamiento de otras funciones, les añaden funcionalidades (las decoran).
  En otras palabras, una función la cual toma como input una función y a su vez retorna otra función.
  Son útiles para reducir las líneas de código duplicadas, hacer nuestro código más legible, fácil de testear, y de mantener.

	def funcion_decoradora(funcion_parametro):

    		def funcion_interior():
			print("vamos a relizar un cálculo: ")

		    	funcion_parametro()
        		print("Aquí acaba el cálculo")
    		return funcion_interior

	@funcion_decoradora
		def suma():
    		print(15+20)

	def resta():
    		print(20-15)

	suma() 
	resta()

	#vamos a realizar un cálculo:
	#35
	#Aquí acaba el cálculo
	#5
  Vemos que la función decoradora sólo se ha aplicado a la suma, que tiene el llamado @funcion_decoradora sobre ella, no a la resta.
  Una funcion decorador está formado por 3 funciones, a recibe una función b, y resulta una nueva función c.
  Luego, se aplica con la sintaxis @nombre_funcion, lo cual añade funcionalidades añadidas a esa nueva función.

---------------
EJERCICIO:

Create a Python class called User that uses the init method and creates a username and a password. Create an object using the class.

  class User:
      def __init__(self, username, password):
        self.username = username
        self.password = password
        


----------------------------------
BIBLIOGRAFIA:

https://www.youtube.com/@pildorasinformaticas
